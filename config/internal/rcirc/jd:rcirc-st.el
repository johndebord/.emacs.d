;; Faces.
(defvar rcirc-bright-nick)
(defvar rcirc-dim-nick)
(defvar rcirc-keyword)
(defvar rcirc-my-nick)
(defvar rcirc-nick-in-message)
(defvar rcirc-nick-in-message-full-line)
(defvar rcirc-other-nick)
(defvar rcirc-prompt)
(defvar rcirc-server)
(defvar rcirc-server-prefix)
(defvar rcirc-timestamp)
(defvar rcirc-track-keyword)
(defvar rcirc-track-nick)
(defvar rcirc-url)

;; Customization variables.
(defvar rcirc-always-use-server-buffer-flag)
(defvar rcirc-authenticate-before-join)
(defvar rcirc-auto-authenticate-flag)
(defvar rcirc-bright-nicks)
(defvar rcirc-buffer-maximum-lines)
(defvar rcirc-coding-system-alist)
(defvar rcirc-decode-coding-system)
(defvar rcirc-default-full-name)
(defvar rcirc-default-port)
(defvar rcirc-default-user-name)
(defvar rcirc-dim-nicks)
(defvar rcirc-encode-coding-system)
(defvar rcirc-fill-column)
(defvar rcirc-fill-flag)
(defvar rcirc-ignore-list)
(defvar rcirc-input-ring-size)
(defvar rcirc-keywords)
(defvar rcirc-kill-channel-buffers)
(defvar rcirc-log-directory)
(defvar rcirc-log-filename-function)
(defvar rcirc-log-flag)
(defvar rcirc-log-process-buffers)
(defvar rcirc-multiline-major-mode)
(defvar rcirc-nick-completion-format)
(defvar rcirc-omit-responses)
(defvar rcirc-omit-threshold)
(defvar rcirc-print-functions)
(defvar rcirc-read-only-flag)
(defvar rcirc-reconnect-delay)
(defvar rcirc-response-formats)
(defvar rcirc-scroll-show-maximum-output)
(defvar rcirc-time-format)

(setq-default rcirc-authinfo
              `(("freenode" nickserv ,jd:irc-nickname ,jd:irc-password)))
(setq-default rcirc-default-nick jd:irc-nickname)
(setq-default rcirc-fill-prefix "       ")
(setq-default rcirc-prompt "(rcirc) ")
(setq-default rcirc-server-alist
              '(("irc.freenode.net" :port 6667 :channels ("#emacs"))))

;; Decide whether or not the next input should be displayed, depending on the
;; context of the cursor in the buffer.
(defun jd:rcirc-insert-next-input ()
  (interactive "^")
  (if (equal (line-number-at-pos) (count-lines (point-max) (point-min)))
      (rcirc-insert-next-input)
    (scroll-down-line -1)
    (forward-line 1)))

;; Decide whether or not the previous input should be displayed, depending on
;; the context of the cursor in the buffer.
(defun jd:rcirc-insert-prev-input ()
  (interactive "^")
  (if (equal (line-number-at-pos) (count-lines (point-max) (point-min)))
      (rcirc-insert-prev-input)
    (scroll-down-line 1)
    (forward-line -1)))

(defun jd:rcirc-mode-hook ()
  (electric-pair-mode 1)
  (font-lock-mode 1)
  (idle-highlight-mode 1))

(add-hook 'rcirc-mode-hook 'jd:rcirc-mode-hook)

(provide 'jd:rcirc-st)
