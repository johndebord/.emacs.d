(defalias 'ff 'find-file)

(setq-default eshell-command-map nil)
(setq-default eshell-directory-name (concat jd:path-prefix jd:internal-prefix "esh-mode/eshell"))
(setq-default eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))

(defun jd:eshell-clear-buffer ()
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input))
  (beginning-of-line)
  (backward-delete-char 1)
  (end-of-line))

(defun jd:eshell-ack-or-send-input ()
  (interactive)
  (if (get-char-property (point) 'face)
      (progn
	(let ((value (get-char-property (point) 'face)))
	  (cond ((equal (nth 0 (cdr value)) "#ADCF44")
		 (let ((file (thing-at-point 'filename 'no-properties)))
		   (find-file file)
		   (forward-line (- (line-number-at-pos)))))
		((equal (nth 0 (cdr value)) "#F0C649")
		 (let ((line (thing-at-point 'word 'no-properties)))
		   (beginning-of-line)
		   (while (not (equal (nth 0 (cdr (get-char-property (point) 'face))) "#ADCF44"))
		     (forward-line -1))
		   (let ((file (thing-at-point 'filename 'no-properties)))
		     (find-file file)
		     (forward-line (string-to-number line))))))))
    (eshell-send-input)))

(add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)

(provide 'jd:esh-mode-st.el)
