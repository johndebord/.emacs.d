[X] Introduction
    `nil` == `()`
    `nil` means: the symbol `nil`, logical false, and an empty list.
    Convention:
    (cons 'nil ())      ; Emphasize empty list.
    (setq foo-flag nil) ; Emphasize logical false.
    Any non-nil value is logical true.
    `nil` and `t` are special symbols that evaulate themselves.
[X] Lisp Data Types
    ELisp primitive types: integer, float, cons, symbol, string, vector,
    hash-table, subr, byte-code function, record, and buffer (special type).
    Objects are self-typing; meaning that the type is implicit in the object itself.

    Some objects have no read syntax (syntax recognized by the Lisp reader).
    These objects have the form `#<something>`.
    ex: `(current-buffer)`.

    An Emacs Lisp expression is first an Emacs Lisp object and second the object's read syntax.
    Emacs Lisp interpreter workflow: Reads Text -> Produces ELisp Object -> Evaluate.

    Integer Read Syntax:
    `1`

    Float Read Syntax:
    `1.0`

    Char Read Syntax:
    `?A`
    `?\(` (The latter is for ELisp syntactical meaning chars).
    `?\101`
    `?\x42`
    `?\N{UNICODE}`
    `?\^i`  => 9
    `?\^I`  => 9
    `?\C-i` => 9
    `?\C-I` => 9
    `?\M-a`
    `?\M-\C-a` ≡ `?\C-\M-a` ≡ `?\M-\001`

    Objects that have no read syntax are specified in the form `(#<object>)`.

    A symbol is an Emacs Lisp object with a name.
    The symbol serves as the printed representation of the symbol.
    A symbol prefixed with `:` is called a keyword symbol; they act as constants.

    `()` ≡ nil

    `(A ())` ≡ `(A nil)`

    An object that is not a cons cell is called an atom.
    "Cons" means construction of cells.

    [CAR (address)]--->[CDR (decrement)]--->[nil]

    `(object1 . object2)` `.` notation makes the CAR/CDR relationship explicit.

    An `alist` or "associated lsit" is a specially constructed list whose elements are cons cells.
    CAR is the key and CDR is the value.
    `(setq alist-of-colors '((rose . red) (lily . white) (buttercup . yellow)))`.

    A `keymap` type is a list whose CAR is the symbol `keymap`.

    Array type and list type share the same properties as in C++.

    Emacs Lisp has four types of array type: `strings`, `vectors`, `bool-vectors`, and `char-tables`.

    String can hold properties; this is called a `plist`.
    #("foo bar" 0 3 (face bold) 3 4 nil 4 7 (face italic))

    It is up to an individual function to determine whether an argument belongs to a type that the function can use.

    `type-of` returns a symbol naming the primitive type of object.

    `eq` returns `t` if both objects are the same object.
    `equal` return `t` if both objects have the same contents.
    `equal` => `eq`
    `eq`   !=> `equal`

    A non-compiled function in Emacs Lisp is a lambda expression.
    A primitive function is a function callable from Emacs Lisp but written in the C.
[X] Numbers
    Number can be represented as such: `123`, `#o123`, `#x123`.
    A `marker` is also a number (it's place in the buffer), hence `number-or-marker`.
[X] Strings and Characters
[X] Lists
    All objects except cons cells are atoms. The symbol `nil` is both an atom and a cons cell; this is the only exception.
[X] Sequences, Arrays, and Vectors
    There are four types of array type: `strings`, `vectors`, `bool-vectors`, and `char-tables`.

    A `vector`, like a `string` or a `number`, is considered a constant for evaluation: the result of evaluating it is the same vector.
    This does not evaluate or even examine the elements of the vector.
    Note that constants do not get evaluated; for lack of a better term - they just go.
    Evaluates to itself.

    For an array of keyboard input characters (such as a key sequence), a `vector` may of necessary use,
    because many keyboard input characters are outside the range that will fit in a string.
[X] Records
[X] Hash Tables
[X] Symbols
    Each symbol has four fields:
    Name, Value, Function, Property List.

    The function cell or the value cell may be void, which means that the cell does not reference any object.
    This is not the same thing as holding the symbol void, nor the same as holding the symbol nil.
    Examining a function or value cell that is void results in an error, such as "Symbol's value as variable is void".

    Symbol workflow:
    Create Symbol ---> Reader Checks If It Exists By Hashing And Looking Into Obarry (a vector) ---> If Not; Create It (interning it).
[X] Evaluation
    Quoting returns its single argument, as written, without evaluating it.
[X] Control Structures
[X] Variables
    The textual form of a variable in a Emacs Lisp program is written using the read syntax for the symbol representing the variable.

    In Emacs Lisp, certain symbols normally evaluate to themselves. These include `nil` and `t`, as well as any symbol whose name starts with `:`;
    these are called keywords.

    Every variable that has been defined with `defvar`, `defconst`, or `defcustom` is a special variable.

    The default scoping rule in Emacs Lisp is called dynamic scoping, which simply states that the current binding at any given point in the execution
    of a program is the most recently-created binding for that variable that still exists.

    A variable is void if it has an unassigned value cell.

    By default, local bindings are dynamic bindings.
    Such a binding has dynamic scope, meaning any part of the program can potentially access the variable binding.
    It also has dynamic extent, meaning that the binding lasts only while the binding construct (such as the body of a `let` form) is being executed.

    Emacs Lisp can create lexical bindings.
    Any reference to the variable must be located textually within the binding construct.
    It also has indefinite extent, meaning that under some circumstances the binding can live on even after the binding construct has finished executing,
    by means of special objects called `closures`.

    Conventions:
    - If a variable has no global definition, wrap it in a binding construct.
    - Otherwise define the variable properly with `defvar`, `defconst`, or `defcustom`.

    A lexically-bound variable has lexical scope, meaning that any reference to the variable must be located textually within the binding construct.

    Lexical bindings have indefinite extent. After a binding construct has finished executing,
    its lexical environment can be "kept around" in Lisp objects called `closures`.
    A closure is created when you define a named or anonymous function with lexical `(print lexical-binding)` binding enabled.
[X] Functions
[X] Macros
[X] Customization Settings
[X] Loading
    Loading a file of Lisp code means bringing its contents into the Lisp environment in the form of Lisp objects.
    Emacs finds and opens the file, reads the text, evaluates each form, and then closes the file. Such a file is also called a Emacs Lisp library.
[X] Byte Compilation
[X] Debugging Lisp Programs
[X] Reading and Printing Lisp Objects
[X] Minibuffers
[X] Command Loop
    A recursive editing level has the effect of suspending whatever command invoked it and permitting the user to do arbitrary editing
    before resuming that command.
[ ] Keymaps
[ ] Major and Minor Modes
[X] Documentation
[X] Files
[X] Backups and Auto-Saving
[X] Buffers
[X] Windows
[X] Frames
[X] Positions
    `save-excursion` is the standard way to move point within one part of a program and avoid affecting the rest of the program,
    and is used thousands of times in the Lisp sources of Emacs.
[X] Markers
[X] Text
    Note that the `<C-h>-f` description of the function is different from that which is described in the reference manual.
[X] Non-ASCII Characters
    Unibyte means 1 byte text.
    Multibyte means variable-byte-length text.
[X] Searching and Matching
[X] Syntax Tables
[X] Abbrevs and Abbrev Expansion
[X] Threads
[X] Processes
    The command-line arguments must all be strings, and are supplied to the program as separate argument strings.
    Wildcard characters and other shell constructs have no special meanings in these strings, since the strings are passed directly to the specified program.

    You can start synchronous processes  (where Emacs will not continue until the process has finished).
    You can start asynchronous processes (where Emacs can continue on while the process is running).
[X] Emacs Display
[X] Operating System Interface
[X] Preparing Lisp code for distribution
[X] Emacs 25 Antinews
[X] GNU Free Documentation License
[X] GNU General Public License
[X] Tips and Conventions
[X] GNU Emacs Internals
    Garbage collecting is the act of the program marking all objects that can be accessible; objects that are deemed unaccessible are then considered garbage.

    Cons cells and strings can be allocated on the stack via the C macros AUTO_CONS and AUTO_STRING.

    The C code field `dedicated` is one example of a field; determines if window is dedicated to its buffer.

    You can integrate user-created modules into emacs; the idea I thought of is better integrating gdb.
[X] Standard Errors
[X] Standard Keymaps
[X] Standard Hooks
