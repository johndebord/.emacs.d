/// std headers
#include <iostream> // std::cout
#include <fstream>  // std::ifstream

/// top level boost headers
#include <boost/filesystem.hpp> // bfs::path

/// top level-1  boost headers
#include <boost/interprocess/anonymous_shared_memory.hpp> // bip::anonymous_shared_memory
#include <boost/interprocess/file_mapping.hpp>            // bip::file_mapping
#include <boost/interprocess/managed_mapped_file.hpp>     // bipmmf::segement_manager
#include <boost/interprocess/mapped_region.hpp>           // bip::mapped_region
#include <boost/interprocess/sync/file_lock.hpp>          // bip::file_lock

#include <boost/asio/io_service.hpp> // bas::ioservice
#include <boost/asio/signal_set.hpp> // bas::signal_set

namespace bas = boost::asio;
namespace bfs = boost::filesystem;
namespace bip = boost::interprocess;
namespace bss = boost::system;

using bipmmf = boost::interprocess::managed_mapped_file;

int main() {
    std::size_t                 siz    {bip::mapped_region::get_page_size()};
    std::ofstream               ofs    {"test.bin"
                                       ,std::ofstream::trunc               };
    bfs::resize_file                   ("test.bin"
                                        ,siz                                );
    bfs::path                   pth    {bfs::current_path()/"test.bin"     };
    bip::file_mapping           fmp    {pth.string().c_str()
                                       ,bip::read_write                    };
    bip::mapped_region          mpr    {fmp
                                       ,bip::read_write                    };
    bipmmf::segment_manager*    sgm    {new ((char*)mpr.get_address())
                                        bipmmf::segment_manager(siz)       };

    size_t sz{100000};
    size_t of{0};
    time_t t{time(nullptr)};

    while(true) {
        if(t != time(nullptr) ) {
            t = time(nullptr);
            std::cout << "ok" << '\n';
            // std::cout << of/(sz/100) << "% complete..." << std::endl;
        }
    }
    
    return 0;
}
