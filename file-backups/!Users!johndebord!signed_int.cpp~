/**
 *  Serialize an signed_int object with as few bytes as possible
 *
 *  @param ds - The stream to write
 *  @param v - The value to serialize
 *  @tparam DataStream - Type of datastream
 *  @return DataStream& - Reference to the datastream
 */
template<typename DataStream>
friend DataStream& operator << ( DataStream& ds, const signed_int& v ){
   uint32_t val = uint32_t((v.value<<1) ^ (v.value>>31));
   do {
      uint8_t b = uint8_t(val) & 0x7f;
      val >>= 7;
      b |= ((val > 0) << 7);
      ds.write((char*)&b,1);//.put(b);
   } while( val );
   return ds;
}

/**
 *  Deserialize an signed_int object
 *
 *  @param ds - The stream to read
 *  @param vi - The destination for deserialized value
 *  @tparam DataStream - Type of datastream
 *  @return DataStream& - Reference to the datastream
 */
template<typename DataStream>
friend DataStream& operator >> ( DataStream& ds, signed_int& vi ){
   uint32_t v = 0; char b = 0; int by = 0;
   do {
      ds.get(b);
      v |= uint32_t(uint8_t(b) & 0x7f) << by;
      by += 7;
   } while( uint8_t(b) & 0x80 );
   vi.value = ((v>>1) ^ (v>>31)) + (v&0x01);
   vi.value = v&0x01 ? vi.value : -vi.value;
   vi.value = -vi.value;
   return ds;
}
