#include <iostream>
#include <string>
#include <array>

enum class COLOR
{
	BLACK,
	WHITE,
	NOTHING
};

class ChessPiece
{
protected:
	COLOR color;

public:
	ChessPiece() = default;
	ChessPiece(COLOR c) : color{ c } {}
	COLOR get_color() const { return color; }

	friend std::ostream& operator<<(std::ostream& out, const ChessPiece piece)
	{
		if (piece.color == COLOR::BLACK)
			return out << '-';
		if (piece.color == COLOR::WHITE)
			return out << '+';
	}
};

class King : public ChessPiece
{
private:
	bool moved;

public:
	King() = default;
	King(COLOR c) { color = c; }
	void set_moved(bool b) { moved = b; }
	bool has_moved() { return moved; }
};

class Queen : public ChessPiece
{
private:


public:
	Queen() = default;
	Queen(COLOR c) { color = c; }
};

class Bishop : public ChessPiece
{
private:


public:
	Bishop() = default;
	Bishop(COLOR c) { color = c; }
};

class Knight : public ChessPiece
{
private:


public:
	Knight() = default;
	Knight(COLOR c) { color = c; }
};

class Rook : public ChessPiece
{
private:
	bool moved;

public:
	Rook() = default;
	Rook(COLOR c) { color = c; }
	void set_moved(bool b) { moved = b; }
	bool has_moved() { return moved; }
};

class Pawn : public ChessPiece
{
private:


public:
	Pawn() = default;
	Pawn(COLOR c) { color = c; }
};

class Board
{
private:
	std::array<std::array<ChessPiece, 8>, 8> board[8][8]{};

	Pawn white_pawn1, white_pawn2, white_pawn3, white_pawn4, white_pawn5, white_pawn6, white_pawn7, white_pawn8;
	Rook white_rook1, white_rook2;
	Knight white_knight1, white_knight2;
	Bishop white_bishop1, white_bishop2;
	Queen white_queen;
	King white_king;

	Pawn black_pawn1, black_pawn2, black_pawn3, black_pawn4, black_pawn5, black_pawn6, black_pawn7, black_pawn8;
	Rook black_rook1, black_rook2;
	Knight black_knight1, black_knight2;
	Bishop black_bishop1, black_bishop2;
	Queen black_queen;
	King black_king;

public:
	Board(std::string color) :
		white_pawn1(COLOR::WHITE), white_pawn2(COLOR::WHITE), white_pawn3(COLOR::WHITE), white_pawn4(COLOR::WHITE), white_pawn5(COLOR::WHITE), white_pawn6(COLOR::WHITE), white_pawn7(COLOR::WHITE), white_pawn8(COLOR::WHITE),
		white_rook1(COLOR::WHITE), white_rook2(COLOR::WHITE),
		white_knight1(COLOR::WHITE), white_knight2(COLOR::WHITE),
		white_bishop1(COLOR::WHITE), white_bishop2(COLOR::WHITE),
		white_queen(COLOR::WHITE),
		white_king(COLOR::WHITE),

		black_pawn1(COLOR::BLACK), black_pawn2(COLOR::BLACK), black_pawn3(COLOR::BLACK), black_pawn4(COLOR::BLACK), black_pawn5(COLOR::BLACK), black_pawn6(COLOR::BLACK), black_pawn7(COLOR::BLACK), black_pawn8(COLOR::BLACK),
		black_rook1(COLOR::BLACK), black_rook2(COLOR::BLACK),
		black_knight1(COLOR::BLACK), black_knight2(COLOR::BLACK),
		black_bishop1(COLOR::BLACK), black_bishop2(COLOR::BLACK),
		black_queen(COLOR::BLACK),
		black_king(COLOR::BLACK)
	{
		if (color == "white")
		{
			board =
			{
				{ black_rook1, black_knight1, black_bishop1, black_queen, black_king, black_bishop2, black_knight2, black_rook2 },
				{ black_pawn1, black_pawn2, black_pawn3, black_pawn4, black_pawn5, black_pawn6, black_pawn7, black_pawn8 },
				{ nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr },
				{ nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr },
				{ nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr },
				{ nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr },
				{ white_pawn1, white_pawn2, white_pawn3, white_pawn4, white_pawn5, white_pawn6, white_pawn7, white_pawn8 },
				{ white_rook1, white_knight1, white_bishop1, white_queen, white_king, white_bishop2, white_knight2, white_rook2 }
			};
		}
		if (color == "black")
		{
			board =
			{
				{ &white_rook1, &white_knight1, &white_bishop1, &white_queen, &white_king, &white_bishop2, &white_knight2, &white_rook2 },
				{ &white_pawn1, &white_pawn2, &white_pawn3, &white_pawn4, &white_pawn5, &white_pawn6, &white_pawn7, &white_pawn8 },
				{ nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr },
				{ nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr },
				{ nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr },
				{ nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr },
				{ &black_pawn1, &black_pawn2, &black_pawn3, &black_pawn4, &black_pawn5, &black_pawn6, &black_pawn7, &black_pawn8 },
				{ &black_rook1, &black_knight1, &black_bishop1, &black_queen, &black_king, &black_bishop2, &black_knight2, &black_rook2 }
			};
			std::cout << *board << std::endl;
		}
	}

	void print_board()
	{
		std::cout << "\ta\tb\tc\td\te\tf\tg\th\n1\t";
		for (int i = 0; i != 8; ++i)
		{
			for (int j = 0; j != 8; ++j)
			{
				if (board[i][j] == nullptr)
					std::cout << '#' << std::endl;
				std::cout << board[i][j] << '\t';
			}
			std::cout << std::endl;
			if (i != 7)
				std::cout << i + 2 << '\t';
		}
	}

	~Board() = default;
};

class Game
{
private:
	Board board;
	bool won;
	bool lost;

public:
	Game(std::string color) : board{ color } {}
	bool is_over();
	void update(std::string);

	void print_board() { board.print_board(); }
};

int main()
{
	std::cout << "white or black:\n";
	std::string color;
	std::cin >> color;

	// Start game with your given color on the bottom.
	// TODO throw exception if user enters an invalid color.
	Game game(color);
	/*game.print_board();*/
	/*std::string move;
	while (!game.is_over())
	{
		std::cin >> move;
		game.update(move);
	}*/

	system("pause");
	return 0;
}
