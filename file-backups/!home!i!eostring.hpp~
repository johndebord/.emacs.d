#include <stdexcept>

class my_string
{
public:
    using value_type = char;
    using iterator = char*;
    using const_iterator = const char*;

    my_string();
    my_string(const char* contents);
    my_string(size_t n, char c);

    my_string(const my_string& rhs);
    my_string& operator=(const my_string& rhs);

    my_string(my_string&& rhs) noexcept;
    my_string& operator=(my_string&& rhs) noexcept;

    size_t size() const noexcept
    {
        return size;
    }

    size_t tot_size() const noexcept
    {
        return size == 0 ? 0 : size + 1;
    }

    size_t capacity() const noexcept
    {
        return capacity;
    }

    char& operator[](size_t n)
    {
        return begin[n];
    }

    const char& operator[](size_t n) const
    {
        return begin[n];
    }

    char& at(size_t n);
    const char& at(size_t n) const;

    iterator begin()
    {
        return &begin[0];
    }

    const_iterator begin() const noexcept
    {
        return &begin[0];
    }

    const_iterator cbegin() const noexcept
    {
        return &begin[0];
    }

    iterator end()
    {
        return &begin[size];
    }

    const_iterator end() const noexcept
    {
        return &begin[size];
    }

    const_iterator cend() const noexcept
    {
        return &begin[size];
    }

    void reserve(size_t n);

    void resize(size_t n, char c);
    void resize(size_t n) { resize(n, ' '); }

    const char* c_str() const noexcept
    { 
        return begin; 
    }

    //inserts n elements with value c starting at index pos
    my_string& insert(size_t pos, size_t n, char c);
    //inserts C-style string s at index pos
    my_string& insert(size_t pos, const char* s);

    //erases count elemenets starting at index
    my_string& erase(size_t index, size_t count);
    //erases pos if it is found in begin
    iterator erase(const_iterator pos);

    void pop_back();

    void push_back(char c);

    my_string& operator+=(const my_string& rhs);
    ~my_string();

private:
    size_t size;
    size_t capacity;
    char* begin;
};
