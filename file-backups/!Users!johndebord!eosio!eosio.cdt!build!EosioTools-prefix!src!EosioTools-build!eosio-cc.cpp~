// Declares clang::SyntaxOnlyAction.
#include "clang/Frontend/FrontendActions.h"
#include "clang/Tooling/CommonOptionsParser.h"
#include "clang/Tooling/Tooling.h"
#include <iostream>
#include <sstream>

// Declares llvm::cl::extrahelp.
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/FileSystem.h"
#include "llvm/Support/Program.h"

using namespace clang::tooling;
using namespace llvm;

#define COMPILER_NAME "eosio-cc"
#include <compiler_options.hpp>

Options parse_arguments(int argc, const char** argv) {
   // fix to show version info without having to have any other arguments
   for (int i=0; i < argc; i++) {
      if (argv[i] == std::string("-v")) {
         eosio::cdt::environment::exec_subprogram("clang-7", {"-v"});
         return 0;
      }
   }
   cl::ParseCommandLineOptions(argc, argv, std::string(COMPILER_NAME)+" (Eosio C -> WebAssembly compiler)");
}

void print_version() {
   cl::SetVersionPrinter([](llvm::raw_ostream& os) {
      os << COMPILER_NAME << " version: " << "1.5.0-RC" << "\n";
   });
}

void compile(const Options& opts) {
   // first compile
   if (!eosio::cdt::environment::exec_subprogram("clang-7", opts.comp_options))
      exit(EXIT_FAILURE);

   if ( !llvm::sys::fs::exists( opts.output_fn ) ) {
      exit(EXIT_FAILURE);
   }
}

void link(const Options& opts) {
   // then link
   //
   if (opts.link) {
      if (!eosio::cdt::environment::exec_subprogram("eosio-ld", opts.ld_options))
         exit(EXIT_FAILURE);

      if ( !llvm::sys::fs::exists( opts.output_fn ) ) {
         exit(EXIT_FAILURE);
      }
   }
}

void generate_abi(const Options& opts) {
   if (opts.abigen) {
      opts.abigen_options.emplace(opts.abigen_options.begin(), "-- -Wno-unused-command-line-argument");
      opts.abigen_options.emplace(opts.abigen_options.begin(), "-contract="+opts.abigen_contract);
      std::string abigen_output = opts.abigen_output.empty() ? opts.output_fn.substr(0, opts.output_fn.rfind(".wasm"))+".abi" : opts.abigen_output;
      opts.abigen_options.emplace(opts.abigen_options.begin(), "-output="+abigen_output);
      opts.abigen_options.insert(opts.abigen_options.begin(), opts.abigen_inputs);
      for ( auto res : opts.abigen_resources )
         opts.abigen_options.emplace(opts.abigen_options.begin(), res);

      if (!eosio::cdt::environment::exec_subprogram("eosio-abigen", opts.abigen_options))
         exit(EXIT_FAILURE);
      
   }
}

int main(int argc, const char** argv) {
   parse_arguments(argc, argv);
   print_version();
   const Options opts = CreateOptions();
   compile();
   link();
   generate_abi();

   return 0;
}
