#include <initializer_list>

class eostring
{
public:
    eostring();
    eostring(const eostring& s);
    eostring(const eostring& s, size_t pos, size_t len);
    eostring(const char* s);
    eostring(const char* s, size_t n);
    eostring(size_t n, char c);
    template<class InputIterator>
    eostring(InputIterator first, InputIterator last);
    eostring(std::initializer_list<char> il);
    eostring(eostring&& s);
    
    eostring& operator=(const eostring& s);
    eostring& operator=(const char* s);
    eostring& operator=(char c);
    eostring& operator=(std::initializer_list<char> il);
    eostring& operator=(eostring&& s);

    // assign

    // get_allocator

    char& at(size_t n);
    const char& at(size_t n) const;

    char& operator[](size_t n);
    const char& operator[](size_t n) const;
    char& front();
    const char& front() const;
    char& back();
    const char& back() const;
    char* data();
    const char* data() const;
    const char* c_str() const;

    char* begin();
    const char* cbegin() const;
    char* end();
    const char* cend() const;
    // char* rbegin();
    // const char* crbegin() const;
    // char* rend();
    // const char* crend() const;

    bool empty() const;
    size_t size() const;
    size_t length() const;
    size_t max_size() const;
    // reserve
    size_t capacity() const;
    // shrink_to_fit

    // clear
    // insert
    // erase
    // push_back
    // pop_back
    // append
    // operator+=
    // compare
    // starts_with
    // ends_with
    // replace
    // substr
    // copy
    // resize
    // resize
    // swap
    
    ~eostring();

    friend bool operator+ (const eostring& lhs, const eostring& rhs);
    friend bool operator==(const eostring& lhs, const eostring& rhs);
    friend bool operator!=(const eostring& lhs, const eostring& rhs);
    friend bool operator< (const eostring& lhs, const eostring& rhs);
    friend bool operator> (const eostring& lhs, const eostring& rhs);
    friend bool operator<=(const eostring& lhs, const eostring& rhs);
    friend bool operator>=(const eostring& lhs, const eostring& rhs);

private:
    union {
        struct {
            char* _begin;
            size_t _size;
            size_t _capacity;
        };
        char sso_str[24];
    };
};
