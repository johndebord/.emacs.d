cmake_minimum_required (VERSION 3.15)

# Versioning system.
file(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/.git/HEAD BRANCH)
file(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/.git/refs/heads/dev DEV)
file(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/.git/refs/heads/master MASTER)
execute_process(COMMAND git diff-index --quiet HEAD -- RESULT_VARIABLE IS_DIRTY WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

if(IS_DIRTY EQUAL 1)
	set(BRANCH "${BRANCH} (dirty)")
endif()

project (LibA C)

	set (CONFIG_NOTE "// This file is generated by CMake and should NOT be edited under any circumstance.")

	configure_file (
		"${CMAKE_CURRENT_SOURCE_DIR}/config.h.in"
		"${CMAKE_CURRENT_SOURCE_DIR}/src/config.h"
	)

	file (GLOB SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/mod/*.c")
	add_library (LibA STATIC ${SOURCES})
	target_include_directories(LibA PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/mod)

project (TheProject)

	# Standards nessecary for Azure SDK.
	set (CMAKE_C_STANDARD 99)
	set (CMAKE_CXX_STANDARD 11)

	# Azure SDK vars
	set (AZURE_SDK ${CMAKE_CURRENT_SOURCE_DIR}/Azure)
	add_subdirectory(${AZURE_SDK})
	set(AZUREIOT_INCLUDES "${AZURE_SDK}" "${AZURE_SDK}/iothub_client/inc" ${AZURE_SDK}/serializer/inc)

	# Application itself
	set (MAINFILE "${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp")
	file (GLOB SOURCES "src/*.cpp" "src/database/*.cpp" "src/mod/*.cpp" "src/mk/*.cpp")
	list (REMOVE_ITEM SOURCES ${MAINFILE})

	add_executable(Application ${MAINFILE} ${SOURCES})
	add_dependencies(Application LibA json11)

	# Enable multithreading
	find_package(Threads)
	target_link_libraries(Application ${CMAKE_THREAD_LIBS_INIT})

	# Link other dependencies
	add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/JSON")
        target_link_libraries(Application curl json11 "${CMAKE_CURRENT_BINARY_DIR}/libLibA.a")

	target_link_libraries(Application iothub_client serializer)
	target_include_directories(Application PUBLIC ${AZUREIOT_INCLUDES} ${CMAKE_CURRENT_SOURCE_DIR}/src ${CMAKE_CURRENT_SOURCE_DIR}/src/database ${CMAKE_CURRENT_SOURCE_DIR}/src/mod)

	message(STATUS "Version info:\n${BRANCH}\n${DEV}\n${MASTER}")

	find_package(PythonInterp)
	if(NOT PYTHONINTERP_FOUND)
        	message(WARNING "WARNING: Couldn't find Python on this system. Application might not behave as expected")
	endif()
