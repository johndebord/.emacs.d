as --32 -gstabs -o prog6.o prog6.s; ld -m elf_i386 --dynamic-linker /lib/ld-linux.so.2 -lc -o prog6 prog6.o; time ./prog6

gcc -m32 -gstabs -no-pie -o prog2 prog2.s; time ./prog2

clang++ -I ~/cxx/include/ -Wall -Wextra -stdlib=libc++ -lc++abi -std=c++17 -o a.out main.cpp; ./a.out

;; investigate all flags in these commands and of the provided
   prog2rams in the book
;; like, why is the `--dynamic-linker` flag needed exactly?
;; take not of the new asm opcodes
;; remember to write out the questions for the c++ book
;; go through each opcode one-by-one to see what they do
;; write down Intel's optimization recommendations
;; how do I set the alignment in the data section?
;; what are the true differences af all memory models (linear/segment/real)
;; Before EBP is where the function arguments are!
;; use yasnippet for function template in x86 assembly
;; what if you dereference data in a register?
;; what truly is the point of the parity flag?
;; how do registers interpret between signed and unsigned?
;; page 144; test this out
;; test:
;;   store 0 to eax (and memory)
;;   put a byte in eax (and memory)
;;   find out where that byte in eax is (and memory)
;;   next
;;   store 0 to eax (and memory)
;;   put a word in eax (and memory)
;;   find out where that word in eax is (and memory)
;; Remeber to memorize the stuff
;; So are registers signed or unsigned?
;; Difference between MMX and SSE registers?
;; The differences between SSE, SEE2, and SSE3 registers/instructions; get to work in gdb
;; Program my assembly progams for 64-bit addresses
;; Check out bolt.org to view the different assembly outputs
;; Make sure to review all assembly programs in the book where they are generated by C code for practice; comprehend them in full
;; Make sure to go over the optimization strategies in the "Controlling Execution Flow" chapter again for a more thorough comprehension
;; Might have to reread the book to get a better comprehension
;; Go over the "Bit Testing" example again in chapter 8 and figure out what is going wrong
;; I should probably download and convert VolumeI and VolumeII of Intel's manuals and save them;
   utilizing them in emacs down the road for quick documentation look-up
;; How does `0xFFFF - %cx; neg %cx; dec %cx;` equal the length of a string?? Page 295
;; How does that math trick work on page 281??
;; Remember to go over all examples and fully comprehend what they do
1) Memorize hex tables: Hex -> Decimal -> Binary AND base 2 to base 10 conversions AND from 0-16 BIN->BASE10->HEX
2) Memorize all registers
3) Go through all the source code of the tools presented in "Professional Assembly Language"
;; Note that when I go through the optimization section again using C++ remember to review any potentially confusing math tricks that might be in the book
   if I come across them when I'm testing each assembly program using C++
;; Remember to use the 64 bit registers and instruction variations when reviews all asm programs
;; Gain a quick understanding of assembly programming ARM architecture


;;; use `as` then link with gcc; see if that works
;;; use `gcc -v` to determine what commands I'm missing